<Activity mc:Ignorable="sap sap2010" x:Class="Python" mva:VisualBasic.Settings="{x:Null}" sap:VirtualizedContainerService.HintSize="661,1695" sap2010:WorkflowViewState.IdRef="Python_1" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:p="http://schemas.uipath.com/workflow/activities/python" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="52">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>UiPath.Python</x:String>
      <x:String>UiPath.Python.Activities</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="23">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.Python</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>Microsoft.VisualStudio.Services.Common</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Python.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.CV</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="The following workflow exemplifies the usage of the Python activities. For this example we use the MathOperations.py script which defines 2 operations, Add and Subtract. This example uses the Add function." DisplayName="Python" sap:VirtualizedContainerService.HintSize="452,1530" sap2010:WorkflowViewState.IdRef="Sequence_2">
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <p:PythonScope sap2010:Annotation.AnnotationText="In order to use the Python activities you need to have Python installed on your machine. Python Scope is used to host the Python evironment. In order to properly set up the scope activity, you need to specify the path to the Python installation folder and the version you have installed." DisplayName="Python Scope" sap:VirtualizedContainerService.HintSize="410,1381" sap2010:WorkflowViewState.IdRef="PythonScope_1" Path="C:\Users\HP\AppData\Local\Programs\Python\Python36\" TargetPlatform="x64">
      <p:PythonScope.Body>
        <ActivityAction x:TypeArguments="x:Object">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="x:Object" Name="PythonEngineSessionProperty" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="376,1258" sap2010:WorkflowViewState.IdRef="Sequence_1">
            <Sequence.Variables>
              <Variable x:TypeArguments="p:PythonObject" Name="MathFunctions" />
              <Variable x:TypeArguments="p:PythonObject" Name="SumResultPython" />
              <Variable x:TypeArguments="x:Int32" Name="Result" />
              <Variable x:TypeArguments="p:PythonObject" Name="diff" />
              <Variable x:TypeArguments="x:Int32" Name="difference" />
            </Sequence.Variables>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <p:LoadScript Code="{x:Null}" sap2010:Annotation.AnnotationText="First, we load the script inside the Python environment. For this, you must indicate the file path of the script. Once loaded, a PythonObject variable is returned as a handler." DisplayName="Load Python Script" sap:VirtualizedContainerService.HintSize="334,131" sap2010:WorkflowViewState.IdRef="LoadScript_1" Result="[MathFunctions]" ScriptFile="MathOperations.py">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </p:LoadScript>
            <p:InvokeMethod sap2010:Annotation.AnnotationText="The Invoke Python Method activity enables calling individual methods defined inside a Python script. We need to provide the name of the method, the script instance that we created earlier and a set of input parameters. The parameters can be specified either through an array or a list. In this case we will use an Int32 array. The result of the invocation is stored inside a PythonObject variable." DisplayName="Invoke Python Method" sap:VirtualizedContainerService.HintSize="334,22" sap2010:WorkflowViewState.IdRef="InvokeMethod_1" Instance="[MathFunctions]" Name="add" Parameters="[{5,3}]" Result="[SumResultPython]">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </p:InvokeMethod>
            <p:GetObject x:TypeArguments="x:Int32" sap2010:Annotation.AnnotationText="" DisplayName="Get Python Object" sap:VirtualizedContainerService.HintSize="334,53" sap2010:WorkflowViewState.IdRef="GetObject`1_1" PythonObject="[SumResultPython]" Result="[Result]">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </p:GetObject>
            <ui:MessageBox Caption="{x:Null}" ChosenButton="{x:Null}" sap2010:Annotation.AnnotationText="Finally, we show our result using a message box.&#xA;" Buttons="Ok" DisplayName="Message box" sap:VirtualizedContainerService.HintSize="334,101" sap2010:WorkflowViewState.IdRef="MessageBox_1" Text="[&quot;Addition=&quot;+Result.ToString]" TopMost="True">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:MessageBox>
            <p:InvokeMethod sap2010:Annotation.AnnotationText="The Invoke Python Method activity enables calling individual methods defined inside a Python script. We need to provide the name of the method, the script instance that we created earlier and a set of input parameters. The parameters can be specified either through an array or a list. In this case we will use an Int32 array. The result of the invocation is stored inside a PythonObject variable." DisplayName="Invoke Python Method" sap:VirtualizedContainerService.HintSize="334,259" sap2010:WorkflowViewState.IdRef="InvokeMethod_2" Instance="[MathFunctions]" Name="dif" Parameters="[{5,3}]" Result="[diff]">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </p:InvokeMethod>
            <p:GetObject x:TypeArguments="x:Int32" sap2010:Annotation.AnnotationText="In order to work with the result in Studio we will need to convert it to a .NET type. In this case we take the PythonObject returned by the Invoke Python Method activity and convert it to an Int32 .NET datatype. The conversion type is specified in the TypeArgument property field. If the result returned by the python script is, for example, a String, then the TypeArgument has to be set to String.  " DisplayName="Get Python Object" sap:VirtualizedContainerService.HintSize="334,259" sap2010:WorkflowViewState.IdRef="GetObject`1_2" PythonObject="[diff]" Result="[difference]">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </p:GetObject>
            <ui:MessageBox Caption="{x:Null}" ChosenButton="{x:Null}" sap2010:Annotation.AnnotationText="Finally, we show our result using a message box.&#xA;" Buttons="Ok" DisplayName="Message box" sap:VirtualizedContainerService.HintSize="334,101" sap2010:WorkflowViewState.IdRef="MessageBox_2" Text="[&quot;Subtraction=&quot;+difference.ToString]" TopMost="True">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:MessageBox>
          </Sequence>
        </ActivityAction>
      </p:PythonScope.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </p:PythonScope>
  </Sequence>
</Activity>